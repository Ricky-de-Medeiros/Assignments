assign4.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "assign4.h"

//global variable definitions
int fat[32];
char dir[30][80];
int sect1[30];
int dircount;

int main(){
//Call functions and sort out error messages
	char filename[25];
	char temp[100];
	char command[50];
	int num_sectors;
	int indx;
	int firstF;


	read_dir();
	read_fat();


	printf(":");
	gets(temp);
	sscanf(temp, "%s %s %d", command, filename, &num_sectors);

//read user input until quit
	while(1) {
		indx = does_file_exist_in_dir(filename);
		if (strcmp(command, "sectors") == 0) {

			if (indx == -1) {
				printf("File does not exist\n");
				}
			else {
				print_sector_chain(sect1[indx]);
				}
			}

		else if (strcmp(command, "delete") == 0) {
			if (indx == -1) {
				printf("File does not exist\n");
				}
			else {
				deallocate_sectors(sect1[indx]);
				delete_file_from_dir(indx);

				save_dir();
				save_fat();
				}
			}

		else if (strcmp(command, "add") == 0) {
			int numfree = free_sectors();
			if (indx != -1) {
				printf("File already exists\n");
			}
			else if (numfree == 0) {
				printf("Directory is full\n");
			}
			else if (num_sectors > numfree) {
				printf("Not enough free spaces\n");
			}
			else {
				firstF = first_free_sector();
				add_file_to_dir(filename, firstF);
 				allocate_sectors(firstF, num_sectors);

				save_dir();
				save_fat();
				}
			}

		else if (strcmp(command, "dir") == 0) {
			print_dir();
		}

		else if (strcmp(command, "quit") == 0) {
			exit(1);
		}
		printf(":");
		gets(temp);
		sscanf(temp, "%s %s %d", command, filename, &num_sectors);
	}
}
fat.c
#include <stdio.h>
#include <stdlib.h>
#include "assign4.h"

static int sectors[32];

void read_fat(void) {
	int i;
	FILE *fatdat;
	fatdat = fopen("fat.dat", "r");
	if (fatdat != NULL) {
		for (i = 0; i < 32; i++) {
			fscanf(fatdat, "%d", &fat[i]);
		}
	}
}

void save_fat(void) {
	int i;
	FILE *fatdat;
	fatdat = fopen("fat.dat", "w");
	for (i = 0; i < 32; i++) {
		fprintf(fatdat, "%d\n", fat[i]);
	}
	fclose(fatdat);
}

int free_sectors(void) {
	int i;
	int free_count = 0;
	for (i = 0; i < 32; i++) {
		if (fat[i] == 1) {
			free_count++;
		}
	}
return free_count;
}

int first_free_sector(void) { //no parameters, returns a count of 1s in fat
	int i;
	for (i = 0; i < 32; i++) {
		if (fat[i] == 1) {
			break;
		}
	}
	return i;
}


void allocate_sectors(int start_sector, int n) { //sent first sector and number of sectors in the chain
	int i, j;
	for (j = 0; j < n-1; j++) {
		i = start_sector +1;
		while (fat[i] != 1) {
			i++;
		}
		fat[start_sector] = i;
		start_sector = i;
		}
		fat[i] = 0;
	}

void deallocate_sectors(int start_sector) { //sent file's first sector , no return
	int i = start_sector;
	int next;
	while (fat[i] != 0) {
//record next variable before overwriting
		next = fat[i];
//overwrite fat entry
		fat[i] = 1;
		i = next;
	}
//overwrite the 0 at the end of chain with a 1;
	fat[i] = 1;
}

void print_sector_chain(int start_sector) { //sent the first sector, no return
	printf("%d ", start_sector);
	while (fat[start_sector] != 0) {
		printf("%d ", fat[start_sector]);
		start_sector = fat[start_sector];
	}
	printf("\n");
}
dir.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "assign4.h"

int sects[30];
char file[25];
char fname[25];


void read_dir(void) {
	int i = 0;
	//DOChAC = Declare, open, check, Access, Close
  FILE *dirdat;
  dirdat = fopen("dir.dat", "r");
  if (dirdat != NULL) {
    while (fscanf(dirdat, "%s %d", dir[i], &sect1[i]) != EOF) {
      i++;
    }
	 }
	 dircount = i;
	 fclose(dirdat);
	}

void save_dir(void) {
	//DO, no checking, A, C
	int i;
	FILE *dirdat;
	dirdat = fopen("dir.dat", "w");
	for (i = 0; i <= dircount; i++) {
		fprintf(dirdat, "%s %d\n", dir[i], sect1[i]);
		}
	fclose(dirdat);
}

void print_dir(void) {
	int i;
	for (i = 0; i < dircount; i++) {
		printf("%s %d\n", dir[i], sect1[i]);
	}
}

int does_file_exist_in_dir(char *file) { 	//works on main fname. Returns indx or -1 (doesn't exist)
	int i;
	for (i = 0; i < dircount; i++) {
  	if (strcmp(file, dir[i]) == 0) {
    	return i;
    }
  }
  return -1;
}

/* Function not needed
int is_dir_full(){
}
*/

void add_file_to_dir(char *file, int start_sector) { //sent file name an first_sector, no return
	strcpy(dir[dircount], file);
	sect1[dircount] = start_sector;
	dircount++;
}

void delete_file_from_dir(int position) {
	int i;
	for (i = position; i < (dircount-1); i++) {
		//shuffle up data in dir and sct1 arrays
		strcpy(dir[i], dir[i+1]);
		sect1[i] = sect1[i + 1];
	}
	dircount -= 1;
}
assign4.h
void read_fat(void);
void save_fat(void);
int  free_sectors(void);
int  first_free_sector(void);
void allocate_sectors(int start_sector, int n);
void deallocate_sectors(int start_sector);
void print_sector_chain(int start_sector);

void read_dir(void);
void save_dir(void);
void print_dir(void);
int  does_file_exist_in_dir(char *file);
void add_file_to_dir(char *file, int start_sector);
void delete_file_from_dir(int position);

extern int fat[32];
extern char dir[30][80];
extern int sect1[30];
extern int dircount;
makefile
assign4.exe : assign4.o dir.o fat.o
	g++ -o assign4.exe assign4.o dir.o fat.o

assign4.o : assign4.c assign4.h
	g++ -c assign4.c
	
dir.o : dir.c assign4.h
	g++ -c dir.c

fat.o : fat.c assign4.h
	g++ -c fat.c
